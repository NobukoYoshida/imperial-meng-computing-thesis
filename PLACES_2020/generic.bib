 @techreport{WebSocketRFC,
   AUTHOR = {I. Fette and A. Melnikov},
   TITLE = "{The WebSocket Protocol}",
   HOWPUBLISHED = {Internet Requests for Comments},
   TYPE="{RFC}",
   NUMBER=6455,
   PAGES = {1-71},
   YEAR = {2011},
   MONTH = {December},
   ISSN = {2070-1721},
   PUBLISHER = "{RFC Editor}",
   INSTITUTION = "{RFC Editor}",
   URL={https://www.rfc-editor.org/rfc/rfc1654.txt}
   }

@inproceedings{Scribble,
  author = {Nobuko Yoshida and Raymond Hu and Rumyana Neykova and Nicholas Ng},
  title = {{The Scribble Protocol Language}},
  booktitle = {8th International Symposium on Trustworthy Global Computing},
  series = {LNCS},
  volume = {8358},
  pages = {22--41},
  publisher = {Springer},
  doi = "10.1007/978-3-319-05119-2_3",
  year = 2013
}

@inproceedings{Hybrid2016,
  author = {Raymond Hu and Nobuko Yoshida},
  title = {{Hybrid Session Verification through Endpoint API Generation}},
  booktitle = {19th International Conference on Fundamental Approaches to Software Engineering},
  series = {LNCS},
  volume = {9633},
  pages = {401--418},
  publisher = {Springer},
  doi = "10.1007/978-3-662-49665-7_24",
  year = 2016
}

@article{PureScript2019, title={Multiparty Session Type-safe Web Development with Static Linearity}, volume={291}, ISSN={2075-2180}, DOI={10.4204/EPTCS.291.4}, journal={Electronic Proceedings in Theoretical Computer Science}, author={King, Jonathan and Ng, Nicholas and Yoshida, Nobuko}, year={2019}, month={Apr}, pages={35–46} }

@article{Python2017,
  author = {Rumyana Neykova and Nobuko Yoshida},
  title = {{How to Verify Your Python Conversations}},
  journal = {Behavioural Types: from Theory to Tools},
  pages = {77--98},
  publisher = {River Publishers},
  doi = "10.13052/rp-9788793519817",
  year = 2017
}

@inproceedings{MPST,
  author = {Mario Coppo and Mariangiola Dezani-Ciancaglini and Luca Padovani and Nobuko Yoshida},
  title = {{A Gentle Introduction to Multiparty Asynchronous Session Types}},
  booktitle = {15th International School on Formal Methods for the Design of Computer, Communication and Software Systems: Multicore Programming},
  series = {LNCS},
  volume = {9104},
  pages = {146--178},
  publisher = {Springer},
  doi = "10.1007/978-3-319-18941-3_4",
  year = 2015
}

 @inproceedings{TypeScript, place={Berlin, Heidelberg}, series={Lecture Notes in Computer Science}, title={Understanding TypeScript}, ISBN={978-3-662-44202-9}, DOI={10.1007/978-3-662-44202-9_11}, abstractNote={TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers—well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.}, booktitle={ECOOP 2014 – Object-Oriented Programming}, publisher={Springer}, author={Bierman, Gavin and Abadi, Martín and Torgersen, Mads}, editor={Jones, RichardEditor}, year={2014}, pages={257–281}, collection={Lecture Notes in Computer Science} }

@article{MVU2019, title={Model-View-Update-Communicate: Session Types meet the Elm Architecture}, url={http://arxiv.org/abs/1910.11108}, abstractNote={The Elm programming language pioneers the Model-View-Update (MVU) architecture for writing web applications in a functional style. Although popular amongst developers, MVU has not been studied formally; it is therefore difficult to reason about any extensions, and each implementer must re-discover the essence of the architecture. In this paper we introduce $lambda_{textsf{MVU}}$, a formal model of the MVU architecture as a concurrent $lambda$-calculus, and prove its correctness. We extend $lambda_{textsf{MVU}}$ with subscriptions and commands as found in Elm. By further extending the calculus with linearity and model transitions, we provide the first formal integration of session-typed communication with a GUI framework. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.}, note={arXiv: 1910.11108}, journal={arXiv:1910.11108 [cs]}, author={Fowler, Simon}, year={2019}, month={Oct} }


 @inbook{LINKS, place={Berlin, Heidelberg}, title={Links: Web Programming Without Tiers}, volume={4709}, ISBN={978-3-540-74791-8}, url={http://link.springer.com/10.1007/978-3-540-74792-5_12}, DOI={10.1007/978-3-540-74792-5_12}, abstractNote={Links is a programming language for web applications that generates code for all three tiers of a web application from a single source, compiling into JavaScript to run on the client and into SQL to run on the database. Links supports rich clients running in what has been dubbed ‘Ajax’ style, and supports concurrent processes with statically-typed message passing. Links is scalable in the sense that session state is preserved in the client rather than the server, in contrast to other approaches such as Java Servlets or PLT Scheme. Client-side concurrency in JavaScript and transfer of computation between client and server are both supported by translation into continuation-passing style.}, booktitle={Formal Methods for Components and Objects}, publisher={Springer Berlin Heidelberg}, author={Cooper, Ezra and Lindley, Sam and Wadler, Philip and Yallop, Jeremy}, editor={de Boer, Frank S. and Bonsangue, Marcello M. and Graf, Susanne and de Roever, Willem-PaulEditors}, year={2007}, pages={266–296} }


 @misc{TypescriptSpec ,title={TypeScript Language Specification}, url={https://github.com/microsoft/TypeScript}, abstractNote={TypeScript is a superset of JavaScript that compiles to clean JavaScript output. - microsoft/TypeScript}, journal={GitHub}, author={Microsoft Research} }


 @misc{React,
  title={React – A JavaScript library for building user interfaces}, url={https://reactjs.org/}, abstractNote={A JavaScript library for building user interfaces}, author={Facebook Open Source} }
